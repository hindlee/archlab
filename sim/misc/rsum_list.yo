                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 6300                 |     xorq %rax,%rax        # val=0
0x00c: 804800000000000000   | 	call main		# Execute main program
0x015: 00                   | 	halt			# Terminate program 
                            | 
                            | # 内存区域 存放链表
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | #END
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call rsum_list		
0x05b: 90                   |     ret
                            | 
                            | # long sum_list(long i)
                            | # ele1 in %rdi
0x05c:                      | rsum_list:
0x05c:                      | test:	
0x05c: 6277                 |     andq %rdi,%rdi  #设置 CC，当%rdi为0时，链表为结尾，结束
0x05e: 746a00000000000000   |     jne loop          # Stop when 0
0x067: 6300                 |     xorq %rax,%rax
0x069: 90                   | 	ret                  # Return
0x06a:                      | loop:
0x06a: 50a70000000000000000 |     mrmovq (%rdi),%r10
0x074: a0af                 |     pushq %r10   #将值放到栈中
0x076: 50770800000000000000 |     mrmovq 8(%rdi),%rdi #调到下一个node
0x080: 805c00000000000000   |     call rsum_list
0x089: b08f                 |     popq %r8       #将值放到%r8寄存器中
0x08b: 6080                 |     addq %r8,%rax     #将结果加到return val中
0x08d: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
